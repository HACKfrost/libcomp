sudo: required
dist: trusty
language: cpp

cache:
  directories:
    - cache

matrix:
  include:
    - compiler: clang
      env:
        - COMPILER_CC=clang
        - COMPILER_CXX=clang++
        - BUILD_NAME=clang
    - compiler: gcc
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-5
      env:
        - COMPILER_CC=gcc-5
        - COMPILER_CXX=g++-5
        - BUILD_NAME=gcc5

before_install:
  - export ROOT_DIR=`pwd`
  - export CACHE_DIR=`pwd`/cache
  - export COVERALLS_ENABLE=OFF
  - export COVERALLS_SERVICE_NAME=travis-ci
  - cd ${CACHE_DIR}
  - if [ ! -f ninja-linux.zip ]; then wget https://github.com/ninja-build/ninja/releases/download/v1.7.1/ninja-linux.zip; fi
  - if [ ! -f cmake-3.6.1-Linux-x86_64.tar.gz ]; then wget -q https://cmake.org/files/v3.6/cmake-3.6.1-Linux-x86_64.tar.gz; fi
  - if [ ! -f clang+llvm-3.8.0-x86_64-linux-gnu-ubuntu-14.04.tar.xz ]; then wget -q http://llvm.org/releases/3.8.0/clang+llvm-3.8.0-x86_64-linux-gnu-ubuntu-14.04.tar.xz; fi
  - if [ ! -f external-0.1.1-clang.tar.bz2 ]; then wget -q https://github.com/comphack/external/releases/download/external-25/external-0.1.1-clang.tar.bz2; fi
  - if [ ! -f external-0.1.1-gcc5.tar.bz2 ]; then wget -q https://github.com/comphack/external/releases/download/external-25/external-0.1.1-gcc5.tar.bz2; fi
  - ls -lh
  - cd ${ROOT_DIR}
  - sudo apt-get update -q
  - sudo apt-get install doxygen libssl-dev unzip -y
  - sudo mkdir -p /opt/ninja/bin
  - cd /opt/ninja/bin
  - sudo unzip $CACHE_DIR/ninja-linux.zip
  - sudo chmod 755 ninja
  - export PATH="/opt/ninja/bin:${PATH}"
  - cd /opt
  - sudo tar xf $CACHE_DIR/cmake-3.6.1-Linux-x86_64.tar.gz
  - export PATH="/opt/cmake-3.6.1-Linux-x86_64/bin:${PATH}"
  - export LD_LIBRARY_PATH="/opt/cmake-3.6.1-Linux-x86_64/lib"
  - cd ${ROOT_DIR}
  - if [ "$CXX" == "clang++" ]; then tar xf $CACHE_DIR/external-0.1.1-clang.tar.bz2; fi
  - if [ "$CXX" != "clang++" ]; then tar xf $CACHE_DIR/external-0.1.1-gcc5.tar.bz2; fi
  - mv external-* binaries
  - chmod +x binaries/ttvfs/bin/ttvfs_gen
  - if [ "$CXX" == "clang++" ]; then cd /opt; fi
  - if [ "$CXX" == "clang++" ]; then sudo tar xf $CACHE_DIR/clang+llvm-3.8.0-x86_64-linux-gnu-ubuntu-14.04.tar.xz; fi
  - if [ "$CXX" == "clang++" ]; then export PATH="/opt/clang+llvm-3.8.0-x86_64-linux-gnu-ubuntu-14.04/bin:${PATH}"; fi
  - if [ "$CXX" == "clang++" ]; then export LD_LIBRARY_PATH="/opt/clang+llvm-3.8.0-x86_64-linux-gnu-ubuntu-14.04/lib:${LD_LIBRARY_PATH}"; fi
  - if [ "$CXX" == "clang++" ]; then cd ${ROOT_DIR}; fi
  - export CC="${COMPILER_CC}"
  - export CXX="${COMPILER_CXX}"
  - export CTEST_OUTPUT_ON_FAILURE=1

script:
  - if [ "${COVERITY_SCAN_BRANCH}" != 1 ]; then mkdir -p build && cd build && cmake -DBUILD_OPTIMIZED=OFF .. && cmake --build . ; fi
#  - if [ "${COVERITY_SCAN_BRANCH}" != 1 ]; then cmake --build . --target test ; fi
  - if [ "${COVERITY_SCAN_BRANCH}" != 1 ]; then cmake --build . --target package ; fi
  - mv libcomp-*.tar.bz2 libcomp-${BUILD_NAME}.tar.bz2

deploy:
  provider: releases
  api_key:
    secure: E2hlWRPURFjAKn8d0avdgUiBp1ZE9CoaamqBInqVih87J9JHT6LWhjnyW0y+yIHLdgFpIWYqOgaZ9LzBPzEaZY0AE4jxKBsFV2Zf0R2TKEBdshsrCdANtGZ8PEvqPi8xpwLJbr82dPMcq7hZbgsVUeM/bc4iDdRCg2S2YTzuM9yVAqlnY8cLy5IWHqJR3lGfsXT9ewUXVy8aZmoP2AC8BreXSQou0Z/nqB1s3m7oPTN5c5i3TtYN535mxr9Rcs3tS+vpN2u2c8iyXRjRJjVFf/ZWf4OV3zJyuB+1WBDtsvoFrzRC8u104tp/LZWIX06arUym4OGgBT63Z0nW9QaKiYumAIoU0LhZDshgFUxn1ddrYYvUGoMciN//NwAdvWKHkjvEzkGZgvviYt2GqHP+8SXFXpl1AwSkBN8c30jYFYpJUMQnDfuoquOB3uSn4o6JpjI5hlCm0q4RkY2RBdBFr6uRkddvey4vAVl/Bj93TtkM1zA4/hqoBADoJmzThawiI8npP5CbGAfXN39Q5002DrvwoVFZXJjH0xzw861MCrZV/SeCFMvGgZfHMEGiihXc+80Tx5bmaG0IdE5jbAN77Tr+xNZZHPMv0NrETo7DLCBZQ0fcvR1ZxRXAd0NFgsNISKzUzYgATFjYLz3IFkEUblNIolAYMhrIFOX1a10vGbE=
  skip_cleanup: true
  file_glob: true
  file: libcomp-*.tar.bz2
  on:
    repo: comphack/libcomp
    branch: develop
    tags: true
